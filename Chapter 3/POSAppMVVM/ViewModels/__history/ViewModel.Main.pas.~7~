unit ViewModel.Main;

interface

uses Model.Main, Model.Declarations;

type
  TMainViewModel = class
  private
    fModel: TMainModel;
    fLabelsText: TMainFormLabelsText;
    fTotalSalesValue: Currency;
    procedure SetModel (const newModel: TMainModel);
    function GetLabelsText: TMainFormLabelsText;
  public
    property Model: TMainModel read fModel write SetModel;
    property LabelsText: TMainFormLabelsText read GetlabelsText;
    function GetTotalSalesValue: string;
    destructor Destroy; override;
  end;
implementation

uses
  System.SysUtils;

{ TMainViewModel }

function TMainViewModel.GetLabelsText: TMainFormLabelsText;
begin
  if not Assigned(fModel) then
  begin
    fLabelsText.Title:='';
    fLabelsText.IssueButtonCaption:='';
    fLabelsText.TotalSalesText:='';
    fLabelsText.TotalSalesEmptyText:=Format('%10.2f',[0.00]);
  end
  else
  begin
    fLabelsText:=fModel.GetMainFormLabelsText;
    fLabelsText.TotalSalesEmptyText:=Format('%10.2f', [0.00]);
                                     //  [StrToInt(fLabelsText.TotalSalesEmptyText)]);
  end;
  result:=fLabelsText;
end;

function TMainViewModel.GetTotalSalesValue: string;
begin
  if not Assigned(fModel) then
    fTotalSalesValue:=0.00
  else
    fTotalSalesValue:=fModel.GetTotalSales;
  result:=Format('%10.2f',[fTotalSalesValue]);
end;

destructor TMainViewModel.Destroy;
begin
  fModel.Free;
  inherited;
end;

procedure TMainViewModel.SetModel(const newModel: TMainModel);
begin
  fModel:=newModel;
end;

end.
